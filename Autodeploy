# Set the name of the software and the product key
$softwareName = "BITDEFENDER GRAVITYZONE"


$autodeploymentcurrentstatus = Ninja-Property-Set autoDeployStatus
# Get the value of $env:Ninja_Location_Name
$locationName = $env:Ninja_Location_Name

# Get the names of the four package locations
$location1Name = Ninja-Property-Docs-Get "Software" $softwareName package1Location
$location2Name = Ninja-Property-Docs-Get "Software" $softwareName package2Location
$location3Name = Ninja-Property-Docs-Get "Software" $softwareName package3Location
$location4Name = Ninja-Property-Docs-Get "Software" $softwareName package4Location

# Compare the location name to each of the package locations
if ($locationName -eq $location1Name) {
    # Get the value from Ninja-Property-Docs-Get for package 1
    $package1key = Ninja-Property-Docs-Get "Software" $softwareName package1key
    Write-Host "Location matches package 1. Value: $package1key"
    $BitdefenderKey = $package1key
}
elseif ($locationName -eq $location2Name) {
    Write-Host "Location matches package 2."
    $BitdefenderKey = Ninja-Property-Docs-Get "Software" $softwareName package2key
}
elseif ($locationName -eq $location3Name) {
    Write-Host "Location matches package 3."
    $BitdefenderKey = Ninja-Property-Docs-Get "Software" $softwareName package3key
}
elseif ($locationName -eq $location4Name) {
    Write-Host "Location matches package 4."
    $BitdefenderKey = Ninja-Property-Docs-Get "Software" $softwareName package4key
}
else {
    Write-Host "Location does not match any package."
}

# Construct the URL with the Bitdefender key
$url = "https://cloud.gravityzone.bitdefender.com/Packages/BSTWIN/0/setupdownloader_[$BitdefenderKey].exe"


#############################
#region RMMTemplate

$Global:nl = [System.Environment]::NewLine
$Global:ErrorCount = 0
$global:Output = '' 

#######

#######
function RMM-Msg
{
  param ($Message)
  $global:Output += " $Message"+$Global:nl
}

#######
function RMM-Error
{
  param ($Message)
  $Global:ErrorCount += 1
  $global:Output += "!$Message"+$Global:nl
}

#######
function RMM-Exit
{  
  $Message = '----------'+$Global:nl+"ErrorCount : $Global:ErrorCount"
  $global:Output += $Message
  Ninja-Property-Set bitdefenderInstallationOutput $global:Output
  Write-Host -Object "$global:Output"
  Exit(0)
}

#endregion 
############################# 

function Get-TimeStamp() {
    return Get-Date -UFormat "%Y-%m-%d %H:%M:%S"
}

if (($null -eq $BitdefenderKey) -or ($BitdefenderKey.Length -eq 0)) {
    RMM-Error "$(Get-Timestamp) Bitdefender Key is empty in your documentation"
    Ninja-Property-Set bitdefenderInstallationOutput "$(Get-Timestamp) Bitdefender Key is empty in your documentation"
    RMM-Exit
}

if (($null -eq $url) -or ($url.Length -eq 0)) {
    RMM-Error "$(Get-Timestamp) Url parameter is not specified"
    RMM-Exit
}

$exe = [uri]::UnescapeDataString($([uri]$url).segments[-1])
if ($null -eq $exe) {
    RMM-Error "$(Get-Timestamp) Exe could not be extracted from the URL"
    RMM-Error "$(Get-Timestamp) Make sure the URL is not modified from the original URL"
    Ninja-Property-Set bitdefenderInstallationOutput "$(Get-Timestamp) Exe could not be extracted from the URL. $(Get-Timestamp) Make sure the URL is not modified from the original URL"
    RMM-Exit
}

if ($autodeploymentcurrentstatus -match "3a80c210-08bd-4c2d-8d34-4d04491caa79") {
   Write-Host "Device has been excluded from auto deployment, exiting script"
  exit
}

# Check if software is installed. If key is present, terminate script
RMM-Msg "$(Get-Timestamp) Checking if Bitdefender is installed..."

$64bit = if ([System.IntPtr]::Size -eq 8) { $true } else { $false }
$RegKeys = @('HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\')
if ($true -eq $64bit) { $RegKeys += 'HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\' }
$Apps = @($RegKeys | Get-ChildItem | Get-ItemProperty | Where-Object { $_.DisplayName -like "*BitDefender*" })
if ($Apps.Count -gt 0) {
    RMM-Error "$(Get-Timestamp) Bitdefender is already installed"
    Ninja-Property-Set autoDeployStatus 30e966b8-77a6-42a4-83a2-20a05637249d
    Start-Sleep -Seconds 10
    RMM-Exit
}

$tmpDir = [System.IO.Path]::GetTempPath()
if (!(Test-Path $tmpDir)) {
    RMM-Error "$(Get-Timestamp) Couldn't get path to temp folder"
    RMM-Exit
}
$tmpExe = Join-Path -Path $tmpDir -ChildPath $exe

# Download
RMM-Msg "$(Get-Timestamp) Bitdefender is not installed"
RMM-Msg "$(Get-Timestamp) Downloading installer..."

if ([Environment]::OSVersion.Version -le (new-object 'Version' 7,0)) {
    # This is required for Windows 7, 8.1
    RMM-Msg "$(Get-Timestamp) Adjusting TLS version(s) for Windows prior to Win 10"
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls -bor [Net.SecurityProtocolType]::Tls11 -bor [Net.SecurityProtocolType]::Tls12
}
$(New-Object System.Net.WebClient).DownloadFile($url, $tmpExe)
if (!$?) {
    RMM-Error "$(Get-Timestamp) Download failed: $($error[0].ToString())"
    RMM-Error "$(Get-Timestamp) Stacktrace: $($error[0].Exception.ToString())"
    RMM-Error "$(Get-Timestamp) Filename: ${tmpExe}"
    RMM-Exit
}
if ((Get-Item -LiteralPath $tmpExe).length -eq 0) {
    RMM-Error "$(Get-Timestamp) Downloaded file is 0 bytes"
    RMM-Error "$(Get-Timestamp) Filename: ${tmpExe}"
    Get-Item -LiteralPath $tmpExe
    RMM-Exit
}

# Install
    RMM-Msg "$(Get-Timestamp) Downloaded"
    RMM-Msg "$(Get-Timestamp) Installing..."

$tmpExe = Get-Item -LiteralPath $tmpExe
Start-Process -FilePath $tmpExe -ArgumentList '/quietinstall /skipeula ' -Wait
if (!$?) {
    RMM-Error "$(Get-Timestamp) Installation failed: $($error[0].ToString())"
    RMM-Error "$(Get-Timestamp) Stacktrace: $($error[0].Exception.ToString())"
    Ninja-Property-Set bitdefenderInstallationOutput "$(Get-Timestamp) Installation failed: $($error[0].ToString()). $(Get-Timestamp) Stacktrace: $($error[0].Exception.ToString())."
    if (Test-Path -PathType Leaf -Path $tmpExe) {
        Remove-Item $tmpExe
    }
    RMM-Exit
}

RMM-Msg "$(Get-Timestamp) Installed"
RMM-Msg "$(Get-Timestamp) Cleaning up temp file..."
Ninja-Property-Set autoDeployStatus 30e966b8-77a6-42a4-83a2-20a05637249d 

# Cleanup
if (Test-Path -PathType Leaf -Path $tmpExe) {
    Remove-Item $tmpExe
    Ninja-Property-Set autoDeployStatus 30e966b8-77a6-42a4-83a2-20a05637249d
}
Ninja-Property-Set autoDeployStatus 30e966b8-77a6-42a4-83a2-20a05637249d
RMM-Msg "$(Get-Timestamp) Finished!"

RMM-Exit
